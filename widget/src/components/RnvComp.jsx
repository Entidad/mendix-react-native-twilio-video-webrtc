//sq
//https://www.freecodecamp.org/news/building-video-call-app-in-react-native/
import{
	Component,
	createElement
}from"react";
import{
	Text,
	View,
	StyleSheet,
	//TextInput,
	//Button,
	TouchableOpacity,
	PermissionsAndroid,
	TouchableHighlight
}from"react-native";
import {
	TwilioVideoLocalView,
	TwilioVideoParticipantView,
	TwilioVideo
}from"react-native-twilio-video-webrtc";
import normalize from"react-native-normalize";
import{widthPercentageToDP as wp,heightPercentageToDP as hp}from"react-native-responsive-screen";
const styles=StyleSheet.create({
	container:{
		flex:1,
		backgroundColor:"white"
	},
	callContainer:{
		flex:1,
		position:"absolute",
		bottom:0,
		top:0,
		left:0,
		right:0,
		minHeight:"100%"
	},
	welcome:{
		fontSize:30,
		textAlign:"center",
		paddingTop:40,
		color:"#000000"
	},
	input:{
		height:50,
		borderWidth:1,
		marginRight:70,
		marginLeft:70,
		marginTop:50,
		textAlign:"center",
		backgroundColor:"white"
	},
	button:{
		marginTop:100
	},
	localVideoOnButtonEnabled:{
		bottom:"40%",
		width:"35%",
		left:"64%",
		height:"25%",
		zIndex:2
	},
	localVideoOnButtonDisabled:{
		bottom:"30%",
		width:"35%",
		left:"64%",
		height:"25%",
		zIndex:2
	},
	remoteGrid:{
		flex:1,
		flexDirection:"column"
	},
	remoteVideo:{
		width:wp("100%"),
		height:hp("100%"),
		zIndex:1
	},
	optionsContainer:{
		position:"absolute",
		left:0,
		bottom:0,
		right:0,
		height:100,
		flexDirection:"row",
		alignItems:"center",
		justifyContent:"space-evenly",
		zIndex:2
	},
	optionButton:{
		width:60,
		height:60,
		marginLeft:10,
		marginRight:10,
		borderRadius:100/2,
		backgroundColor:"grey",
		justifyContent:"center",
		alignItems:"center"
	},
	spacing:{
		padding:10
	},
	inputLabel:{
		fontSize:18,
		color:"#000000"
	},
	buttonContainer:{
		height:normalize(45),
		flexDirection:"row",
		justifyContent:"center",
		alignItems:"center",
		marginBottom:20,
		width:wp("90%"),
		borderRadius:30
	},
	loginButton:{
		backgroundColor:"#1E3378",
		width:wp("90%"),
		justifyContent:"center",
		alignItems:"center",
		marginLeft:20,
		marginTop:10
	},
	Buttontext:{
		color:"white",
		fontWeight:"500",
		fontSize:18
	},
	inputBox:{
		borderBottomColor:"#cccccc",
		fontSize:16,
		width:wp("95%"),
		borderBottomWidth:1,
		color:"#000000"
	}
});
const defaultStyle={
	container:{},
	label:{
		color:"#F6BB42"
	}
};
export async function GetAllPermissions(){
	//see also https://www.freecodecamp.org/news/building-video-call-app-in-react-native/
	try{
		//console.warn("P:0");
		const userResponse=await PermissionsAndroid.requestMultiple([
			PermissionsAndroid.PERMISSIONS.CAMERA,
			PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,
			PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE
		]);
		//console.log(userResponse);
		//console.warn("P:1");
		return userResponse;
	}catch(err){
		console.warn(err);
	}
	return null;
}
export class RnvComp extends Component{
	state={
		isAudioEnabled:true,
		isVideoEnabled:true,
		isButtonDisplay:true,
		status:"disconnected",
		participants:new Map(),
		videoTracks:new Map(),
		identity:"",
		roomName:"",
		token:""
	};
	componentDidMount(){
		//console.warn("componentDidMount");
		//console.warn(this.state.status);
		GetAllPermissions();
	}
	_onConnectButtonPress=()=>{
		//console.warn("_onConnectButtonPress");
		//console.warn(this.state.roomName);
		//console.warn(this.state.token);
		//console.warn(this.state.identity);
		this.refs.twilioVideo.connect({roomName:this.state.roomName,accessToken:this.state.token});
		this.setState({status:"connecting"})
	};
	_onEndButtonPress=()=>{
		//console.warn("_onEndButtonPress");
		//console.warn(this.state.status);
		this.refs.twilioVideo.disconnect()
		this.setState({status:"disconnected"})
		this.setState({participants:new Map()})
		this.setState({videoTracks:new Map()})
	};
	_onMuteButtonPress=()=>{
		//Mon Jan  3 17:20:00 SAST 2022
		//-
		//Mon Jan  3 17:10:00 SAST 2022
		//console.warn("_onMuteButtonPress");
		//console.warn(this.state.status);
		this.refs.twilioVideo
			.setLocalAudioEnabled(!this.state.isAudioEnabled)
			.then(
				(isEnabled)=>{
					this.setState({isAudioEnabled:isEnabled})
				}
			);
	};
	_onFlipButtonPress=()=>{
		//console.warn("_onFlipButtonPress");
		//console.warn(this.state.status);
		this.refs.twilioVideo.flipCamera();
	};
	_onRoomDidConnect=()=>{
		//console.warn("_onRoomDidConnect");
		//setProps({...props, status: 'connected'});
		//setStatus('connected');
		//console.warn(this.state.status);
		this.setState({status:"connected"});
		//this.state.status="connected";//setState({status:"connected"})
		//console.warn(this.state.status);
	};
	_onRoomDidDisconnect=({roomName,error})=>{
		//console.warn("_onRoomDidDisconnect");
		this.setState({status:"disconnected"})
		this.setState({participants:new Map()})
		this.setState({videoTracks:new Map()})
	};
	_onRoomDidFailToConnect=(error)=>{
		//console.warn("_onRoomDidFailToConnect");
		this.setState({status:"disconnected"})
		this.setState({participants:new Map()})
		this.setState({videoTracks:new Map()})
	};
	_onParticipantAddedVideoTrack=({participant,track})=>{
		//console.warn("_onParticipantAddedVideoTrack");
		this.setState({
			videoTracks:new Map([
				...this.state.videoTracks,
				[
					track.trackSid,
					{
						participantSid:participant.sid,
						videoTrackSid:track.trackSid
					}
				]
			]),
		});
	};
	_onParticipantRemovedVideoTrack=({participant,track})=>{
		//console.warn("_onParticipantRemovedVideoTrack");
		alert("_onParticipantRemovedVideoTrack");
		const videoTracks=this.state.videoTracks
		videoTracks.delete(track.trackSid)
		//this.setState({videoTracks:{...videoTracks}})
		/*
		const videoTracks=this.state.videoTracks;
		this.state.videoTracks.delete(track.trackSid);
		this.setState({
			videoTracks:{
				...videoTracks
			}
		});
		*/
	};
	render(){
		this.state.identity=this.props.identity||"identity";
		this.state.roomName=this.props.roomname||"roomname";
		this.state.token=this.props.token||"token";
		return(
			<View style={styles.container}>
			{
				this.state.status==="disconnected"&&
				<View>
					<TouchableHighlight
						style={[styles.buttonContainer,styles.loginButton]}
						onPress={this._onConnectButtonPress}
					>
						<Text style={styles.Buttontext}>Connect</Text>
					</TouchableHighlight>
				</View>
			}
			{
				(this.state.status==="connected"||this.state.status==='connecting')&&
				<View style={styles.callContainer}>
					{
						this.state.status==="connected"&&
						<View style={styles.remoteGrid}>
							<TouchableOpacity
								style={styles.remoteVideo}
								onPress={()=>{this.setState({isButtonDisplay:!this.state.isButtonDisplay})}}
							>
								{
									Array.from(this.state.videoTracks,([trackSid,trackIdentifier])=>{
										return(
											<View>
												<TwilioVideoParticipantView
													style={styles.remoteVideo}
													key={trackSid}
													trackIdentifier={trackIdentifier}
												/>
											</View>
										)
									})
								}
							</TouchableOpacity>
							<TwilioVideoLocalView
								enabled={true}
								style={this.state.isButtonDisplay?styles.localVideoOnButtonEnabled:styles.localVideoOnButtonDisabled}
							/>
						</View>
					}
					<View
						style={
							{
								display:this.state.isButtonDisplay?"flex":"none",
								position:"absolute",
								left:0,
								bottom:0,
								right:0,
								height:100,
								flexDirection:"row",
								alignItems:"center",
								justifyContent:"space-evenly",
								//backgroundColor:"blue",
								//zIndex: 2,
								zIndex:this.state.isButtonDisplay?2:0,
							}
						}
					>
						<TouchableOpacity
							style={
								{
									display:this.state.isButtonDisplay?"flex":"none",
									width:60,
									height:60,
									marginLeft:10,
									marginRight:10,
									borderRadius:100/2,
									backgroundColor:"grey",
									justifyContent:"center",
									alignItems:"center"
								}
							}
							onPress={this._onMuteButtonPress}
						>
							{
								<Text style={{color:"#FFFFFF",fontSize:24}}>Mute</Text>
							}
						</TouchableOpacity>
						<TouchableOpacity
							style={
								{
									display:this.state.isButtonDisplay?"flex":"none",
									width:60,
									height:60,
									marginLeft:10,
									marginRight:10,
									borderRadius:100/2,
									backgroundColor:"grey",
									justifyContent:"center",
									alignItems:"center"
								}
							  }
							onPress={this._onEndButtonPress}>
							{
								<Text style={{color:"#FFFFFF",fontSize:24}}>End</Text>
							}
						</TouchableOpacity>
						<TouchableOpacity
							style={
								{
									display:this.state.isButtonDisplay?"flex":"none",
									width:60,
									height:60,
									marginLeft:10,
									marginRight:10,
									borderRadius:100/2,
									backgroundColor:"grey",
									justifyContent:"center",
									alignItems:"center"
								}
							}
							onPress={this._onFlipButtonPress}
						>
							{
								<Text style={{color:"#FFFFFF",fontSize:24}}>Flip</Text>
							}
						</TouchableOpacity>
					</View>
				</View>
			}
			<TwilioVideo
				ref="twilioVideo"
				onRoomDidConnect={this._onRoomDidConnect}
				onRoomDidDisconnect={this._onRoomDidDisconnect}
				onRoomDidFailToConnect={this._onRoomDidFailToConnect}
				onParticipantAddedVideoTrack={this._onParticipantAddedVideoTrack}
				onParticipantRemovedVideoTrack={this._onParticipantRemovedVideoTrack}
			/>
			</View>
		)
	}
}
